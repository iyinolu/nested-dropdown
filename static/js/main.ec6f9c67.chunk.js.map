{"version":3,"sources":["utils/styles.js","utils/static.js","helpers/index.js","component/Node.js","component/Tree.js","App.js","reportWebVitals.js","index.js"],"names":["Main","styled","Container","Title","NodeDiv","Nested","animated","div","InputField","Form","TEXT_BLOCK","getRandomInt","min","max","Math","ceil","floor","random","Node","React","memo","n","m","last","title","childrenData","classes","useStyles","useState","open","setOpen","showChilden","setShowChildren","useMeasure","ref","viewHeight","height","previous","value","useRef","useEffect","current","usePrevious","context","useContext","treeContext","closeAll","setCloseAll","showData","useSpring","from","opacity","y","to","handleClick","className","nodeIconContainer","onClick","icon","style","children","data","createUseStyles","display","verticalAlign","alignItems","marginRight","cursor","Tree","renderTree","useMemo","temp","map","field","keys","Object","length","name","uuid","Array","_","randn","slice","i","push","createContext","showContinentButton","padding","marginLeft","goButton","width","formContainer","formLabel","fontWeight","color","App","setData","setShowData","treeParams","setTreeParams","axios","post","query","then","res","continents","catch","err","console","log","response","renderFormField","key","label","placeholder","type","onSubmit","e","preventDefault","parseInt","target","handleSubmit","Provider","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ec6f9c67.chunk.js","sourcesContent":["/* eslint-disable no-unused-vars */\nimport styled from 'styled-components'\nimport { animated } from '@react-spring/web'\n\nexport const Main = styled('span')`\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    align-items: center;\n    background: #0f0f0f;\n`\n\nexport const Container = styled('div')`\n    width: auto;\n    height: 100%;\n    font-size: 14px;\n    line-height: 21px;\n    display: flex;\n    min-height: 100vh;\n    padding: 50px 0px;\n    flex-direction: column;    \n    min-width: 500px;\n`\n\nexport const Title = styled('span')`\n    vertical-align: middle;\n    background-color: #c7c4c4;\n    border: 1px solid grey;\n    padding: 2px 8px;\n    border-radius: 5px;\n    vertical-align: \"middle\";\n    display: \"flex\";\n    text-align: \"center\";\n    cursor: pointer;\n`\n\nexport const NodeDiv = styled('span')`\n    display: flex;\n    flex-direction: column;\n    position: relative;\n    padding: 10px 0px 0px 0px;\n    text-overflow: ellipsis;\n    white-space: nowrap;\n    vertical-align: middle;\n    margin-left: 31px\n`\n\nexport const Nested = styled(animated.div)`\n    will-change: transform, opacity, height;\n    margin-left: 10px; \n    display: flex;\n    flex-direction: column;\n    border-left: 1px dashed grey;\n    overflow-y: hidden;\n`\n\nexport const InputField = styled('input')`\n    margin-right: 15px; \n    padding: 10px;\n    background-color: #2e2e2e;\n    color: grey;\n    width: 200px;\n`\n\nexport const Form = styled('form')`\n    display: flex;\n    margin-top: 30px;\n    align-items: center;\n    margin-top: 30px;\n`","/* eslint-disable no-unused-vars */\nexport const TEXT_BLOCK = `\n  Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla ac magna non justo hendrerit feugiat. \n  Donec id fermentum mauris. Duis vitae ornare velit. Mauris dapibus, neque vel facilisis hendrerit, \n  libero ligula tempus est, sed gravida nisl nibh ac mi. Donec posuere, dolor et dignissim sagittis, \n  neque sem pulvinar lectus, quis tempor justo odio at augue. Phasellus in cursus dolor, at viverra neque. \n  Maecenas non rutrum nibh. Nam efficitur est ex, eget malesuada est vehicula sit amet. Donec ullamcorper \n  fringilla justo, at dictum massa elementum eleifend. Ut rutrum blandit lorem eu elementum. Donec diam turpis, \n  fringilla egestas scelerisque a, vulputate et nisi. In faucibus libero id enim lobortis, et auctor urna sollicitudin. \n  Proin ac nunc a metus lobortis condimentum ut vitae nunc. In hac habitasse platea dictumst. Vestibulum maximus \n  imperdiet enim id laoreet. Class aptent taciti sociosqu ad litora torquent per conubia nostra, per inceptos himenaeos.\n`\n\nexport const query = `\n  query {\n    continents {\n      name,\n      countries {\n        name\n        languages {\n          name\n        }\n      }\n    }\n  }\n  `","\n/**\n * Generate a Random Number between\n * min and max exclusive.\n */\nexport function getRandomInt(min, max) {\n  min = Math.ceil(min);\n  max = Math.floor(max);\n  return Math.floor(Math.random() * (max - min) + min);\n}\n","import React from \"react\";\nimport { useSpring, a } from \"@react-spring/web\";\nimport { Title, NodeDiv, Nested } from \"../utils/styles\";\nimport useMeasure from \"react-use-measure\";\nimport { treeContext } from \"../App\";\nimport { createUseStyles } from \"react-jss\";\nimport Tree from \"./Tree\";\n\n/**\n * Building block for Tree structure.\n * Returns renderable tree node.\n */\nconst Node = React.memo(({ n, m, last, title, childrenData }) => {\n  const classes = useStyles();\n  const [open, setOpen] = React.useState(false);\n  const [showChilden, setShowChildren] = React.useState(false);\n  const [ref, { height: viewHeight }] = useMeasure();\n  const previous = usePrevious(open);\n  const context = React.useContext(treeContext);\n  const { closeAll, setCloseAll, showData } = context;\n\n  const { height, opacity, y } = useSpring({\n    from: { height: 0, opacity: 0, y: 0 },\n    to: {\n      height: open && !closeAll ? viewHeight : 0,\n      opacity: open && !closeAll ? 1 : 0,\n      y: open ? 0 : 20,\n    },\n  });\n\n  const handleClick = () => {\n    if (last) {\n      setCloseAll(true);\n      setOpen(false);\n    } else {\n      setOpen(!open);\n      setShowChildren(!showChilden);\n    }\n  };\n\n  const renderIcon = () => {\n    return (\n      <span onClick={handleClick} className={classes.icon}>\n        {open ? \"✅\" : \"⛔️\"}\n      </span>\n    );\n  };\n\n  return (\n    <div>\n      <NodeDiv>\n        <div className={classes.nodeIconContainer}>\n          {renderIcon()}\n          <Title onClick={handleClick}>{title}</Title>\n        </div>\n\n        <Nested\n          style={{\n            opacity,\n            height: open && !closeAll && previous === open ? \"auto\" : height,\n          }}\n        >\n          <a.div\n            ref={ref}\n            style={{ y }}\n            children={\n              showChilden && !closeAll ? (\n                showData ? (\n                  <Tree data={childrenData} />\n                ) : (\n                  <Tree n={n - 1} m={m} />\n                )\n              ) : (\n                \"\"\n              )\n            }\n          />\n        </Nested>\n      </NodeDiv>\n    </div>\n  );\n});\n\nfunction usePrevious(value) {\n  const ref = React.useRef();\n  React.useEffect(() => void (ref.current = value), [value]);\n  return ref.current;\n}\n\nconst useStyles = createUseStyles({\n  nodeIconContainer: {\n    display: \"flex\",\n    verticalAlign: \"middle\",\n    alignItems: \"center\",\n  },\n  icon: {\n    marginRight: \"15px\",\n    cursor: \"pointer\",\n  },\n});\n\nexport default Node;\n","/* eslint-disable react-hooks/exhaustive-deps */\nimport React, { useMemo, useContext } from \"react\";\nimport { treeContext } from \"../App\";\nimport { getRandomInt } from \"../helpers/index\";\nimport { TEXT_BLOCK } from \"../utils/static\";\nimport Node from \"./Node\";\nimport { v4 as uuid } from \"uuid\";\n\n/**\n * Renders a balanced tree consisting of n nodes,\n * and m depth. Makes use of Node.js component.\n */\nconst Tree = React.memo(({ n, m, data }) => {\n  const context = useContext(treeContext);\n  const { closeAll, showData } = context;\n  const renderTree = useMemo(() => {\n    var temp = [];\n    if (showData) {\n      return data\n        ? data.map((field) => {\n            let keys = Object.keys(field);\n            return keys.length === 1 ? (\n              <Node last={true} title={field.name} />\n            ) : (\n              <Node\n                key={`Node-${uuid()}`}\n                last={false}\n                title={field.name}\n                childrenData={field[keys[0] === \"name\" ? keys[1] : keys[0]]}\n              />\n            );\n          })\n        : \"\";\n    } else {\n      if (n === 0) {\n        return (\n          <>\n            {[...Array(m).keys()].map((_) => {\n              var randn = getRandomInt(1, 100);\n              return (\n                <Node last={true} title={TEXT_BLOCK.slice(randn, randn + 10)} />\n              );\n            })}\n          </>\n        );\n      }\n      for (let i = 0; i < m; i++) {\n        var randn = getRandomInt(1, 100);\n        var title = TEXT_BLOCK.slice(randn, randn + 30);\n        temp.push(<Node key={`Node-${uuid()}`} title={title} n={n} m={m} />);\n      }\n    }\n    return <>{temp}</>;\n  }, [n, m, closeAll]);\n  \n  return <>{renderTree}</>;\n});\n\nexport default Tree;\n","/* eslint-disable no-unused-vars */\n\nimport React from \"react\";\nimport { createUseStyles } from \"react-jss\";\nimport \"./App.css\";\nimport { Container, Main, InputField, Form } from \"./utils/styles\";\nimport { query } from \"./utils/static\";\nimport axios from \"axios\";\nimport Tree from \"./component/Tree\";\nexport const treeContext = React.createContext();\n\nfunction App() {\n  /*\n   * Main Component. Renders form fiels, buttons, and\n   * dropdown tree.\n   */\n  const classes = useStyles();\n  const [data, setData] = React.useState([]);\n  const [showData, setShowData] = React.useState(false);\n  const [treeParams, setTreeParams] = React.useState({ n: 2, m: 2 });\n  const [closeAll, setCloseAll] = React.useState(false);\n\n  // Render Tree component with random data\n  React.useEffect(() => {\n    axios\n      .post(\"https://countries.trevorblades.com/\", {\n        query,\n      })\n      .then((res) => {\n        setData(res.data.data.continents);\n      })\n      .catch((err) => console.log(err.response));\n  }, []);\n\n  React.useEffect(() => {\n    if (closeAll) {\n      setCloseAll(false);\n    }\n  }, [closeAll, setCloseAll]);\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    setShowData(false);\n    var n = parseInt(e.target[0].value);\n    var m = parseInt(e.target[1].value);\n    setTreeParams({ n: n, m: m });\n  };\n\n  const renderFormField = (key, label, placeholder) => {\n    return (\n      <div key={key} className={classes.formContainer}>\n        <div className={classes.formLabel}>{label}</div>\n        <InputField type=\"number\" placeholder={placeholder} />\n      </div>\n    );\n  };\n\n  return (\n    <Main>\n      <Form onSubmit={(e) => handleSubmit(e)}>\n        {renderFormField(1, \"N\", \"Enter Tree Depth\")}\n        {renderFormField(2, \"M\", \"No of Children in Each Node\")}\n        <button className={classes.goButton} type=\"submit\">\n          Go\n        </button>\n        <button\n          type=\"button\"\n          className={classes.showContinentButton}\n          onClick={() => setShowData(true)}\n        >\n          Show Continent Data\n        </button>\n      </Form>\n      <Container>\n        <treeContext.Provider value={{ closeAll, setCloseAll, showData }}>\n          {showData ? (\n            data.length > 0 ? (\n              <Tree data={data} />\n            ) : (\n              \"\"\n            )\n          ) : (\n            <Tree n={treeParams.n} m={treeParams.m} />\n          )}\n        </treeContext.Provider>\n      </Container>\n    </Main>\n  );\n}\n\nconst useStyles = createUseStyles({\n  showContinentButton: {\n    padding: \"15px\",\n    marginLeft: \"20px\"\n  },\n  goButton: {\n    height: \"40px\",\n    width: \"40px\",\n  },\n  formContainer: {\n    display: \"flex\",\n    alignItems: \"center\",\n  },\n  formLabel: {\n    fontWeight: \"500\",\n    color: \"grey\",\n    marginRight: \"10px\",\n  },\n});\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}